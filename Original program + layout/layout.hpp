// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":54210,"type":"Slider","state":{"id":"Slider1","x":2,"y":2,"w":8,"h":1,"css":{},"color":"#008000","fontSize":16,"min":0,"max":100,"value":10,"precision":1,"showValue":true}},{"uuid":63248,"type":"Text","state":{"id":"Text1","x":2,"y":0.5,"w":3,"h":1,"css":{},"text":"Promenna","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":29271,"type":"Checkbox","state":{"id":"Checkbox1","x":2,"y":4,"w":4,"h":1,"css":{},"fontSize":20,"checked":false,"color":"#000000","text":"Funguje?"}},{"uuid":47089,"type":"Led","state":{"id":"workLED","x":0,"y":0,"w":1,"h":1,"css":{},"color":"#00ff00","on":false}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Slider1(
            UI.slider(2, 2, 8, 1, 54210)
                .value(10)
        ),
        Text1(
            UI.text(2, 0.5, 3, 1, 63248)
                .text("Promenna")
        ),
        Checkbox1(
            UI.checkbox(2, 4, 4, 1, 29271)
                .fontSize(20)
                .text("Funguje?")
        ),
        workLED(
            UI.led(0, 0, 1, 1, 47089)
                .color("#00ff00")
        )
    {
    }

public:
    void commit();

    Slider& Slider1;
    Text& Text1;
    Checkbox& Checkbox1;
    Led& workLED;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Slider Slider1;
    Text Text1;
    Checkbox Checkbox1;
    Led workLED;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Slider1 = Slider1.finish();
    Layout.Text1 = Text1.finish();
    Layout.Checkbox1 = Checkbox1.finish();
    Layout.workLED = workLED.finish();
    UI.commit();
}

};

};
